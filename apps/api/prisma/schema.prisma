// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String    @id @default(uuid())
    phoneNo    String    @unique
    username   String    @unique
    email      String    @unique
    firstName  String
    lastName   String
    password   String
    bio        String?
    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?   @unique

    ServiceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
    serviceProviderId String?          @unique
    Store             Store?           @relation(fields: [storeId], references: [id])
    storeId           String?          @unique
}

model ServiceProvider {
    id       String    @id @default(uuid())
    services Service[]
    rating   Float?
    User     User?
}

model Service {
    id          String @id @default(uuid())
    name        String
    description String
    price       Float

    provider   ServiceProvider? @relation(fields: [providerId], references: [id])
    providerId String

    VetStore   VetStore? @relation(fields: [vetStoreId], references: [id])
    vetStoreId String?
}

model Availability {
    id         String   @id @default(uuid())
    daysOfWeek String[]
    from       DateTime
    to         DateTime
    Store      Store?
    Vet        Vet?
}

model Store {
    id             String       @id @default(uuid())
    name           String
    location       String
    type           StoreType
    availability   Availability @relation(fields: [availabilityId], references: [id])
    availabilityId String       @unique

    PetStore   PetStore?
    VetStore   VetStore?
    Location   Location? @relation(fields: [locationId], references: [id])
    locationId String?   @unique
    User       User?
}

model PetStore {
    id      String @id @default(uuid())
    storeId String @unique
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

    products Product[]
}

model VetStore {
    id      String    @id @default(uuid())
    storeId String    @unique
    store   Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
    Service Service[]
    vets    Vet[]
}

model Vet {
    id             String       @id @default(uuid())
    name           String
    VetStore       VetStore?    @relation(fields: [vetStoreId], references: [id])
    vetStoreId     String?
    availability   Availability @relation(fields: [availabilityId], references: [id])
    availabilityId String       @unique
}

enum StoreType {
    PetStore
    VetStore
}

model Product {
    id         String    @id @default(uuid())
    price      Float
    PetStore   PetStore? @relation(fields: [petStoreId], references: [id])
    petStoreId String?
}

model Location {
    id        String @id @default(uuid())
    longitude Float
    latitude  Float
    Store     Store?
    User      User?
}

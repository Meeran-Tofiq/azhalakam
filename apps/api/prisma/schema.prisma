// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String  @id @default(uuid())
    phoneNo   String  @unique
    username  String  @unique
    email     String  @unique
    firstName String
    lastName  String
    password  String
    bio       String?

    pets Pet[]

    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?   @unique

    serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
    serviceProviderId String?          @unique
    store             Store?
    reviews           Review[]
}

enum Species {
    CAT
    DOG
    LIZARD
    SNAKE
    FISH
    HAMSTER
    RABBIT
    FERRET
    GUINEAPIG
    HORSE
    AMPHIBIAN
    INSECT
    RODENT
    BIRD
}

enum Gender {
    MALE
    FEMALE
    NOT_SPECIFIED
}

model Pet {
    id           String    @id @default(uuid())
    name         String
    species      Species
    dateOfBirth  DateTime?
    gender       Gender?
    weight       Float?
    lastVetVisit DateTime?
    notes        String?
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model ServiceProvider {
    id       String    @id @default(uuid())
    services Service[]
    reviews  Review[]
    user     User?
}

enum BillingType {
    PER_HOUR
    TOTAL
}

model Service {
    id                String      @id @default(uuid())
    name              String
    description       String
    price             Float
    billingType       BillingType @default(TOTAL)
    durationInMinutes Int?

    provider   ServiceProvider? @relation(fields: [providerId], references: [id])
    providerId String?

    vetStore   VetStore? @relation(fields: [vetStoreId], references: [id])
    vetStoreId String?
}

model Availability {
    id         String   @id @default(uuid())
    daysOfWeek String[]
    from       DateTime
    to         DateTime
    store      Store?
    vet        Vet?
}

enum StoreType {
    PET_STORE
    VET_STORE
}

model Store {
    id        String    @id @default(uuid())
    name      String
    type      StoreType
    avgRating Float?
    species   Species[]
    products  Product[]
    reviews   Review[]

    availability   Availability? @relation(fields: [availabilityId], references: [id])
    availabilityId String?       @unique
    location       Location?     @relation(fields: [locationId], references: [id])
    locationId     String?       @unique
    user           User?         @relation(fields: [userId], references: [id])
    userId         String?       @unique

    petStore PetStore?
    vetStore VetStore?
}

model PetStore {
    id      String @id @default(uuid())
    storeId String @unique
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model VetStore {
    id       String    @id @default(uuid())
    storeId  String    @unique
    store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
    services Service[]
    vets     Vet[]
}

model Vet {
    id             String       @id @default(uuid())
    name           String
    vetStore       VetStore?    @relation(fields: [vetStoreId], references: [id])
    vetStoreId     String?
    availability   Availability @relation(fields: [availabilityId], references: [id])
    availabilityId String       @unique
}

model Product {
    id          String  @id @default(uuid())
    name        String
    description String?
    price       Float
    avgRating   Float?

    store   Store?   @relation(fields: [storeId], references: [id])
    storeId String?
    reviews Review[]
}

model Review {
    id      String @unique @default(uuid())
    rating  Float
    content String

    user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    product           Product?         @relation(fields: [productId], references: [id])
    productId         String?
    store             Store?           @relation(fields: [storeId], references: [id])
    storeId           String?
    serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
    serviceProviderId String?
}

model Location {
    id        String @id @default(uuid())
    longitude Float
    latitude  Float
    store     Store?
    user      User?
}
